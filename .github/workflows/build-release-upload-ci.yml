name: Reusable Workflow - Build & Release & Upload CI

on:
  workflow_call:
    inputs:
      control-title:
        description: Control title
        type: string
        required: true
      control-description:
        description: Control description
        type: string
      control-youtube-video-url:
        description: Cotnrol youtube video url
        type: string
      control-price:
        description: Cotnrol price
        default: Free
        type: string
      control-img-extension:
        description: Cotnrol images extension
        default: png
        type: string
      control-tags:
        description: Control tags (comma separated | added by default `Bever-Controls, PCF`)
        type: string
      solution-folder:
        description: Final solution directory
        default: Solution
        type: string
      pcfproj-prefix:
        description: File name prefix of the .pcfproj
        default: PCF-
        type: string
      release-solution-package-type:
        description: Solution package type to upload to release assets (none / unmanaged / managed / both)
        default: managed
        type: string
      azure-solution-package-type:
        description: Solution package type to upload to Azure blob storage (unmanaged / managed / both)
        default: managed
        type: string
      create-new-release:
        description: Create a new release in GitHub
        default: true
        type: boolean
      delete-old-version-from-azure:
        description: Delete the old version of the solution from Azure blob storage
        default: true
        type: boolean
      node-version:
        description: Node version
        default: 16
        type: number

    outputs:
      solution-unique-name:
        description: The solution unique name
        value: ${{ jobs.solution-configuration.outputs.solution-unique-name }}
      solution-version:
        description: The solution version
        value: ${{ jobs.solution-configuration.outputs.solution-version }}
      solution-parsed-version:
        description: The solution parsed version
        value: ${{ jobs.solution-configuration.outputs.solution-parsed-version }}
      solution-namespace:
        description: The solution namespace
        value: ${{ jobs.solution-configuration.outputs.solution-namespace }}
      release-id:
        description: Created release ID
        value: ${{ jobs.create-release.outputs.release-id }}
      release-name:
        description: Created release name
        value: ${{ jobs.create-release.outputs.release-name }}
      release-tag-name:
        description: Created release tag name
        value: ${{ jobs.create-release.outputs.release-tag-name }}
      release-url:
        description: Created release URL, the URL users can navigate to in order to view the release
        value: ${{ jobs.create-release.outputs.release-url }}
      unmanaged-zip-exists:
        description: Whether the unmanaged solution exists or not
        value: ${{ jobs.main.outputs.unmanaged-zip-exists }}
      managed-zip-exists:
        description: Whether the managed solution exists or not
        value: ${{ jobs.main.outputs.managed-zip-exists }}

jobs:
  input-validation:
    runs-on: ubuntu-latest

    outputs:
      ok: ${{ steps.input-parameters-validation.outputs.ok }}
      message: ${{ steps.input-parameters-validation.outputs.message }}

    steps:
      - name: Validation of input parameters
        id: input-parameters-validation
        run: |
          releaseSolutionPackageTypes="none unmanaged managed both"
          azureSolutionPackageTypes="unmanaged managed both"
          
          ok=true
          message=""

          if [[ $( echo ${{ inputs.solution-folder }} ) == "" ]]
            then
              ok=false
              message="The parameter 'solution-folder' can not be blank."
          elif [[ !($releaseSolutionPackageTypes =~ (" "|^)"${{ inputs.release-solution-package-type }}"(" "|$)) ]]
            then
              ok=false
              message="'${{ inputs.release-solution-package-type }}' is not a valid value for 'release-solution-package-type' parameter."
          elif [[ !($azureSolutionPackageTypes =~ (" "|^)"${{ inputs.azure-solution-package-type }}"(" "|$)) ]]
            then
              ok=false
              message="'${{ inputs.azure-solution-package-type }}' is not a valid value for 'azure-solution-package-type' parameter."
          fi

          echo "ok=$ok" >> $GITHUB_OUTPUT
          echo "message=$message" >> $GITHUB_OUTPUT

      - name: "Error - input validation"
        if: ${{ steps.input-parameters-validation.outputs.ok == 'false' }}
        run: |
          echo "::error title=Input validation::${{ steps.input-parameters-validation.outputs.message }}"
          exit 1

  solution-configuration:
    needs: input-validation
    if: ${{ needs.input-validation.outputs.ok == 'true' }}
    runs-on: windows-latest
    
    outputs:
      solution-unique-name: ${{ steps.get-solution-data.outputs.unique-name }}
      solution-version: ${{ steps.get-solution-data.outputs.version }}
      solution-parsed-version: ${{ steps.get-solution-data.outputs.parsed-version }}
      solution-namespace: ${{ steps.get-solution-data.outputs.namespace }}

    steps:
      - uses: actions/checkout@v3

      - name: Get solution data from `ControlManifest.Input.xml`
        id: get-solution-data
        run: |
          $ControlManifest=Get-ChildItem "*/ControlManifest.input.xml"
          [xml]$XmlDocument=Get-Content -Path $ControlManifest.FullName
          "unique-name=$( $XmlDocument.manifest.control.constructor )" >> $env:GITHUB_OUTPUT
          "version=$( $XmlDocument.manifest.control.version )" >> $env:GITHUB_OUTPUT
          "parsed-version=$( $XmlDocument.manifest.control.version.replace('.', '_') )" >> $env:GITHUB_OUTPUT
          "namespace=$( $XmlDocument.manifest.control.namespace )" >> $env:GITHUB_OUTPUT

      - name: Update `README.md` and copy to `${{ inputs.solution-folder }}/README.md`
        id: update-readme-md
        run: |
          $README = Get-Content -Path "README.md"

          $NewContent = "---
          title: ${{ inputs.control-title }}
          description: ${{ inputs.control-description }}
          version: v${{ steps.get-solution-data.outputs.version }}
          blobPath: ${{ steps.get-solution-data.outputs.unique-name }}/${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_managed.zip
          gitRepoUrl: https://github.com/BeverCRM/PCF-${{ steps.get-solution-data.outputs.unique-name }}
          youtubeVideoUrl: ${{ inputs.control-youtube-video-url }}
          price: ${{ inputs.control-price }}
          imgExtension: ${{ inputs.control-img-extension }}
          tags: [ ${{ inputs.control-tags }}, Bever-Controls, PCF ]
          ---
          "

          Set-Content -Path "${{ inputs.solution-folder }}/README.md" -Value $NewContent
          Add-Content -Path "${{ inputs.solution-folder }}/README.md" -Value $README

      - name: Update `${{ inputs.solution-folder }}/${{ inputs.solution-folder }}.cdsproj`
        id: update-solution-cdsproj
        run: |
          $FileName = "${{ inputs.solution-folder }}/${{ inputs.solution-folder }}.cdsproj"
          [xml]$XmlDocument = Get-Content -Path $FileName

          $namespace = New-Object System.Xml.XmlNamespaceManager($XmlDocument.NameTable)
          $namespace.AddNamespace("github-action", $XmlDocument.DocumentElement.NamespaceURI)

          $ItemGroup = $XmlDocument.DocumentElement.AppendChild($XmlDocument.CreateElement("ItemGroup", $XmlDocument.DocumentElement.NamespaceURI))
          $ProjectReference = $ItemGroup.AppendChild($XmlDocument.CreateElement("ProjectReference", $XmlDocument.DocumentElement.NamespaceURI))
          $ProjectReference.SetAttribute("Include", "../../${{ inputs.pcfproj-prefix }}${{ steps.get-solution-data.outputs.unique-name }}.pcfproj")

          $SolutionPackageType = $XmlDocument.DocumentElement.SelectSingleNode("//github-action:SolutionPackageType", $namespace)
          if ($SolutionPackageType -eq $null) {
            $PropertyGroup = $XmlDocument.DocumentElement.AppendChild($XmlDocument.CreateElement("PropertyGroup", $XmlDocument.DocumentElement.NamespaceURI))
            $SolutionPackageType = $PropertyGroup.AppendChild($XmlDocument.CreateElement("SolutionPackageType", $XmlDocument.DocumentElement.NamespaceURI))
          }
          $SolutionPackageType.InnerText = "Both"

          $XmlDocument.Save($FileName)

      - name: Update `${{ inputs.solution-folder }}/src/Other/Solution.xml`
        id: update-solution-xml
        env:
          publisher-name: 'Bever'
          publisher-prefix: 'bvr'
          publisher-description: 'Bever helps small-sized and medium-sized businesses to digitize by using Dynamics 365 &amp; Power Platform.'
          publisher-email: 'info@bevercrm.com'
          publisher-phone: '+374 (77) 590071'
          publisher-website: 'https://bevercrm.com'
          publisher-city: 'Yerevan'
          publisher-country: 'Armenia'
          publisher-street: 'Abelian 6/4'
          publisher-postal-code: '0038'
        run: |
          $FileName = "${{ inputs.solution-folder }}/src/Other/Solution.xml"
          [xml]$XmlDocument = Get-Content -Path $FileName

          $XmlDocument.ImportExportXml.SolutionManifest.UniqueName = "${{ steps.get-solution-data.outputs.unique-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.LocalizedNames.LocalizedName.description = "${{ steps.get-solution-data.outputs.unique-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Version = "${{ steps.get-solution-data.outputs.version }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Managed = "2"
          
          $XmlDocument.ImportExportXml.SolutionManifest.SelectSingleNode("Descriptions").AppendChild($XmlDocument.CreateElement("Description"))
          $XmlDocument.ImportExportXml.SolutionManifest.Descriptions.SelectSingleNode("Description").SetAttribute("description", "${{ inputs.control-description }}")
          $XmlDocument.ImportExportXml.SolutionManifest.Descriptions.SelectSingleNode("Description").SetAttribute("languagecode", "1033")

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.UniqueName = "${{ env.publisher-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.LocalizedNames.LocalizedName.description = "${{ env.publisher-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.CustomizationPrefix = "${{ env.publisher-prefix }}"

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.EMailAddress.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.SupportingWebsiteUrl.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].City.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Country.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Line1.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].PostalCode.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Telephone1.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.EMailAddress = "${{ env.publisher-email }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.SupportingWebsiteUrl = "${{ env.publisher-website }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Telephone1 = "${{ env.publisher-phone }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].City = "${{ env.publisher-city }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Country = "${{ env.publisher-country }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Line1 = "${{ env.publisher-street }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].PostalCode = "${{ env.publisher-postal-code }}"

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.SelectSingleNode("Descriptions").AppendChild($XmlDocument.CreateElement("Description"))
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Descriptions.SelectSingleNode("Description").SetAttribute("description", "${{ env.publisher-description }}")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Descriptions.SelectSingleNode("Description").SetAttribute("languagecode", "1033")

          $XmlDocument.Save($FileName)

      - name: Upload solution configuration artifacts
        id: upload-solution-configuration-artifacts
        uses: actions/upload-artifact@v3
        with:
          name: solution_configuration_artifacts
          path: ${{ inputs.solution-folder }}/

  build:
    needs: solution-configuration
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download solution configuration artifacts
        id: download-solution-configuration-artifacts
        uses: actions/download-artifact@v3
        with:
          name: solution_configuration_artifacts
          path: github-action/solution/

      - name: Setup Node.js ${{ inputs.node-verion }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-verion }}

      - name: Install dependencies
        id: install-dependecies
        run: npm ci

      - name: Refresh types
        id: refresh-types
        run: npm run refreshTypes

      - name: Build project
        id: build-project
        run: |
          npm run clean --if-present
          npm run build -- --buildMode production --if-present

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: MSBuild
        id: msbuild
        working-directory: github-action/solution/
        run: msbuild /t:rebuild /restore /p:configuration=release

      - name: Rename solution files to `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip` &  `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip`
        id: rename-solution-files
        run: get-childitem -path github-action/solution/bin/Release | rename-item -newname { $_.name -replace '${{ inputs.solution-folder }}', '${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}' }

      - name: Move `github-action/solution/README.md` to `github-action/solution/bin/Release/`
        id: move-readme-md
        run: Move-Item -Path "github-action/solution/README.md" -Destination "github-action/solution/bin/Release"

      - name: Upload solution artifacts
        id: upload-solution-artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_artifacts
          path: github-action/solution/bin/Release/

  create-release:
    needs:
      - solution-configuration
      - build
    if: ${{ inputs.create-new-release == true }}
    runs-on: ubuntu-latest
    
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-name: v${{ needs.solution-configuration.outputs.solution-version }}
      release-tag-name: v${{ needs.solution-configuration.outputs.solution-version }}
      release-url: ${{ steps.create-release.outputs.html_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Download solution artifacts
        id: download-solution-artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_artifacts
          path: github-action/solution/

      - name: Create release v${{ needs.solution-configuration.outputs.solution-version }}
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.solution-configuration.outputs.solution-version }}
          release_name: v${{ needs.solution-configuration.outputs.solution-version }}
          body_path: CHANGELOG.md

      - name: Upload release asset `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip` (unmanaged)
        id: release-unmanaged-solution
        if: ${{ steps.create-release.conclusion == 'success' && (inputs.release-solution-package-type == 'unmanaged' || inputs.release-solution-package-type == 'both') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: github-action/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip
          asset_name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip
          asset_content_type: application/zip

      - name: Upload release asset `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip` (managed)
        id: release-managed-solution
        if: ${{ steps.create-release.conclusion == 'success' && (inputs.release-solution-package-type == 'managed' || inputs.release-solution-package-type == 'both') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: github-action/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip
          asset_name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip
          asset_content_type: application/zip

  upload-to-azure-storage:
    needs:
      - solution-configuration
      - create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        
      - name: Download solution artifacts
        id: download-solution-artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_artifacts
          path: github-action/solution/

      - name: Disable the error trap
        run: set +e

      - name: Delete solution old version directory from Azure storage (if exists)
        id: delete-solution-old-version-directory-from-azure-storage
        if: ${{ inputs.delete-old-version-from-azure == true }}
        continue-on-error: true
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage fs directory delete \
            --yes \
            --name "${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --file-system "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

      - name: Enable the error trap
        run: set -e

      - name: SHOW OUTPUTS
        run: |
          echo "conclusion: ${{ elete-solution-old-version-directory-from-azure-storage.conclusion }}"
          echo "outcome: ${{ elete-solution-old-version-directory-from-azure-storage.outcome }}"

      - name: Upload `README.md` of the solution new version to Azure storage.
        id: upload-solution-new-version-readme-file-to-azure-storage
        if: ${{ inputs.azure-solution-package-type != 'both' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload \
            --file "github-action/solution/README.md" \
            --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --content-type text/markdown \
            --overwrite true

      - name: Upload solution new version files (unmanaged & managed) to Azure storage
        id: upload-solution-new-version-files-to-azure-storage
        if: ${{ inputs.azure-solution-package-type == 'both' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload-batch \
            --source github-action/solution/ \
            --destination "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --content-type application/zip \
            --overwrite true

      - name: Upload solution new version file (unmanaged) to Azure storage
        id: upload-solution-new-version-unmanaged-file-to-azure-storage
        if: ${{ inputs.azure-solution-package-type == 'unmanaged' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload \
            --file "github-action/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip" \
            --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --content-type application/zip \
            --overwrite true

      - name: Upload solution new version file (managed) to Azure storage
        id: upload-solution-new-version-managed-file-to-azure-storage
        if: ${{ inputs.azure-solution-package-type == 'managed' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload \
            --file "github-action/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip" \
            --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --content-type application/zip \
            --overwrite true
