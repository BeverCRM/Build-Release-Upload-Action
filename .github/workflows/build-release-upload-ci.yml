name: Reusable Workflow - Build & Release & Upload CI

# TODO: check if npm run build can be removed
# TODO: make configurations for marketplace db
# TODO: install and use pac cli
# TODO: remove input params control-price and control-img-extension

on:
  workflow_call:
    inputs:
      control-title:
        description: Control title
        type: string
        required: true
      control-description:
        description: Control description
        type: string
      control-thumbnail-url: # TODO: changed
        description: Cotnrol thumbnail url (included in use-default)
        type: string
      control-primary-image-url: # TODO: changed
        description: Cotnrol primary image url (included in use-default)
        type: string
      control-youtube-video-url:
        description: Cotnrol youtube video url
        type: string
      control-markdown-file-url: # TODO: new
        description: Cotnrol markdown file url (included in use-default)
        type: string
      control-tags:
        description: Control tags (comma separated | added by default `Bever-Controls, PCF, <control unique name>`)
        type: string
      solution-folder:
        description: Final solution directory
        default: Solution
        type: string
      pcfproj-prefix:
        description: File name prefix of the .pcfproj
        default: PCF-
        type: string
      release-solution-package-type:
        description: Solution package type to upload to release assets (none / unmanaged / managed / both)
        default: managed
        type: string
      azure-solution-package-type:
        description: Solution package type to upload to Azure blob storage (unmanaged / managed / both)
        default: managed
        type: string
      create-new-release:
        description: Create a new release in GitHub
        default: true
        type: boolean
      delete-old-version-from-azure:
        description: Delete the old version of the solution from Azure blob storage
        default: true
        type: boolean
      use-default: # TODO: new
        description: Use default information for control inputs
        default: true
        type: boolean
      node-version:
        description: Node version
        default: 16
        type: number

    outputs:
      solution-unique-name:
        description: The solution unique name
        value: ${{ jobs.solution-configuration.outputs.solution-unique-name }}
      solution-version:
        description: The solution version
        value: ${{ jobs.solution-configuration.outputs.solution-version }}
      solution-parsed-version:
        description: The solution parsed version
        value: ${{ jobs.solution-configuration.outputs.solution-parsed-version }}
      solution-namespace:
        description: The solution namespace
        value: ${{ jobs.solution-configuration.outputs.solution-namespace }}
      release-id:
        description: Created release ID
        value: ${{ jobs.create-release.outputs.release-id }}
      release-name:
        description: Created release name
        value: ${{ jobs.create-release.outputs.release-name }}
      release-tag-name:
        description: Created release tag name
        value: ${{ jobs.create-release.outputs.release-tag-name }}
      release-url:
        description: Created release URL, the URL users can navigate to in order to view the release
        value: ${{ jobs.create-release.outputs.release-url }}
      unmanaged-zip-exists:
        description: Whether the unmanaged solution exists or not
        value: ${{ jobs.main.outputs.unmanaged-zip-exists }}
      managed-zip-exists:
        description: Whether the managed solution exists or not
        value: ${{ jobs.main.outputs.managed-zip-exists }}

jobs:
  input-validation:
    runs-on: ubuntu-latest

    outputs:
      ok: ${{ steps.input-parameters-validation.outputs.ok }}
      message: ${{ steps.input-parameters-validation.outputs.message }}

    steps:
      - name: Validation of input parameters
        id: input-parameters-validation
        run: |
          releaseSolutionPackageTypes="none unmanaged managed both"
          azureSolutionPackageTypes="unmanaged managed both"
          
          ok=true
          message=""

          if [[ $( echo ${{ inputs.solution-folder }} ) == "" ]]
            then
              ok=false
              message="The parameter 'solution-folder' can not be blank."
          elif [[ !($releaseSolutionPackageTypes =~ (" "|^)"${{ inputs.release-solution-package-type }}"(" "|$)) ]]
            then
              ok=false
              message="'${{ inputs.release-solution-package-type }}' is not a valid value for 'release-solution-package-type' parameter."
          elif [[ !($azureSolutionPackageTypes =~ (" "|^)"${{ inputs.azure-solution-package-type }}"(" "|$)) ]]
            then
              ok=false
              message="'${{ inputs.azure-solution-package-type }}' is not a valid value for 'azure-solution-package-type' parameter."
          fi

          echo "ok=$ok" >> $GITHUB_OUTPUT
          echo "message=$message" >> $GITHUB_OUTPUT

      - name: "Error - input validation"
        if: ${{ steps.input-parameters-validation.outputs.ok == 'false' }}
        run: |
          echo "::error title=Input validation::${{ steps.input-parameters-validation.outputs.message }}"
          exit 1

  solution-configuration:
    needs: input-validation
    if: ${{ needs.input-validation.outputs.ok == 'true' }}needs.solution-configuration.result == 'success'
    runs-on: windows-latest
    
    outputs:
      solution-unique-name: ${{ steps.get-solution-data.outputs.unique-name }}
      solution-version: ${{ steps.get-solution-data.outputs.version }}
      solution-parsed-version: ${{ steps.get-solution-data.outputs.parsed-version }}
      solution-namespace: ${{ steps.get-solution-data.outputs.namespace }}
      default-control-description: ${{ steps.get-repo-metadata.outputs.repo-description }}
      default-control-thumbnail-url: ${{ steps.get-repo-metadata.outputs.thumbnail-url }}
      default-control-primary-image-url: ${{ steps.get-repo-metadata.outputs.primary-image-url }}
      default-control-markdown-file-url: ${{ steps.get-repo-metadata.outputs.markdown-file-url }}
      repo-url: ${{ steps.get-repo-metadata.outputs.repo-url }}
      control-tags: 'Bever-Controls, PCF, ${{ steps.get-solution-data.outputs.unique-name }}$( if (${{ inputs.control-tags }}) { ", ${{ inputs.control-tags }}" } )'

    steps:
      - uses: actions/checkout@v3

      - name: Get repository metadata
        id: get-repo-metadata
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # result-encoding: string
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            const { data } = await github.rest.repos.get({ owner, repo });
            return data;
          outputs:
            repo-url: ${{ steps.get-repo-metadata.outputs.data.html_url }}
            repo-description: ${{ steps.get-repo-metadata.outputs.data.description }}
            thumbnail-url: '${{ steps.get-repo-metadata.outputs.data.html_url }}/blob/${{ env.GITHUB_REF }}/MarketplaceAssets/images/thumbnail.png'
            primary-image-url: '${{ steps.get-repo-metadata.outputs.data.html_url }}/blob/${{ env.GITHUB_REF }}/MarketplaceAssets/images/primary.png'
            markdown-file-url: '${{ steps.get-repo-metadata.outputs.data.html_url }}/blob/${{ env.GITHUB_REF }}/README.md'

      - name: Get solution data from `ControlManifest.Input.xml`
        id: get-solution-data
        run: |
          $ControlManifest=Get-ChildItem "*/ControlManifest.Input.xml"
          [xml]$XmlDocument=Get-Content -Path $ControlManifest.FullName
          "unique-name=$( $XmlDocument.manifest.control.constructor )" >> $env:GITHUB_OUTPUT
          "version=$( $XmlDocument.manifest.control.version )" >> $env:GITHUB_OUTPUT
          "parsed-version=$( $XmlDocument.manifest.control.version.replace('.', '_') )" >> $env:GITHUB_OUTPUT
          "namespace=$( $XmlDocument.manifest.control.namespace )" >> $env:GITHUB_OUTPUT

      - name: Update `${{ inputs.solution-folder }}/${{ inputs.solution-folder }}.cdsproj`
        id: update-solution-cdsproj
        run: |
          $FileName = "${{ inputs.solution-folder }}/${{ inputs.solution-folder }}.cdsproj"
          [xml]$XmlDocument = Get-Content -Path $FileName

          $namespace = New-Object System.Xml.XmlNamespaceManager($XmlDocument.NameTable)
          $namespace.AddNamespace("github-action", $XmlDocument.DocumentElement.NamespaceURI)

          $ItemGroup = $XmlDocument.DocumentElement.AppendChild($XmlDocument.CreateElement("ItemGroup", $XmlDocument.DocumentElement.NamespaceURI))
          $ProjectReference = $ItemGroup.AppendChild($XmlDocument.CreateElement("ProjectReference", $XmlDocument.DocumentElement.NamespaceURI))
          $ProjectReference.SetAttribute("Include", "../../${{ inputs.pcfproj-prefix }}${{ steps.get-solution-data.outputs.unique-name }}.pcfproj")

          $SolutionPackageType = $XmlDocument.DocumentElement.SelectSingleNode("//github-action:SolutionPackageType", $namespace)
          if ($SolutionPackageType -eq $null) {
            $PropertyGroup = $XmlDocument.DocumentElement.AppendChild($XmlDocument.CreateElement("PropertyGroup", $XmlDocument.DocumentElement.NamespaceURI))
            $SolutionPackageType = $PropertyGroup.AppendChild($XmlDocument.CreateElement("SolutionPackageType", $XmlDocument.DocumentElement.NamespaceURI))
          }
          $SolutionPackageType.InnerText = "Both"

          $XmlDocument.Save($FileName)

      - name: Update `${{ inputs.solution-folder }}/src/Other/Solution.xml`
        id: update-solution-xml
        env:
          publisher-name: 'Bever'
          publisher-prefix: 'bvr'
          publisher-description: 'Bever helps small-sized and medium-sized businesses to digitize by using Dynamics 365 & Power Platform.'
          publisher-email: 'info@bevercrm.com'
          publisher-phone: '+374 (77) 590071'
          publisher-website: 'https://bevercrm.com'
          publisher-city: 'Yerevan'
          publisher-country: 'Armenia'
          publisher-street: 'Abelian 6/4'
          publisher-postal-code: '0038'
        run: |
          $FileName = "${{ inputs.solution-folder }}/src/Other/Solution.xml"
          [xml]$XmlDocument = Get-Content -Path $FileName

          $SolutionDescription = "PCF - ${{ inputs.control-title }}
        
          ${{ inputs.control-description }}
        
          https://marketplace.bevercrm.com
        
          © $( Get-Date -Format yyyy ) BEVER"

          $XmlDocument.ImportExportXml.SolutionManifest.UniqueName = "${{ steps.get-solution-data.outputs.unique-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.LocalizedNames.LocalizedName.description = "${{ steps.get-solution-data.outputs.unique-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Version = "${{ steps.get-solution-data.outputs.version }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Managed = "2"
          
          $XmlDocument.ImportExportXml.SolutionManifest.SelectSingleNode("Descriptions").AppendChild($XmlDocument.CreateElement("Description"))
          $XmlDocument.ImportExportXml.SolutionManifest.Descriptions.SelectSingleNode("Description").SetAttribute("description", $SolutionDescription)
          $XmlDocument.ImportExportXml.SolutionManifest.Descriptions.SelectSingleNode("Description").SetAttribute("languagecode", "1033")

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.UniqueName = "${{ env.publisher-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.LocalizedNames.LocalizedName.description = "${{ env.publisher-name }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.CustomizationPrefix = "${{ env.publisher-prefix }}"

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.EMailAddress.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.SupportingWebsiteUrl.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].City.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Country.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Line1.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].PostalCode.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Telephone1.RemoveAttribute("nil", "http://www.w3.org/2001/XMLSchema-instance")

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.EMailAddress = "${{ env.publisher-email }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.SupportingWebsiteUrl = "${{ env.publisher-website }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Telephone1 = "${{ env.publisher-phone }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].City = "${{ env.publisher-city }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Country = "${{ env.publisher-country }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].Line1 = "${{ env.publisher-street }}"
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Addresses.Address[0].PostalCode = "${{ env.publisher-postal-code }}"

          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.SelectSingleNode("Descriptions").AppendChild($XmlDocument.CreateElement("Description"))
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Descriptions.SelectSingleNode("Description").SetAttribute("description", "${{ env.publisher-description }}")
          $XmlDocument.ImportExportXml.SolutionManifest.Publisher.Descriptions.SelectSingleNode("Description").SetAttribute("languagecode", "1033")

          $XmlDocument.Save($FileName)

      - name: Upload solution configuration artifacts
        id: upload-solution-configuration-artifacts
        uses: actions/upload-artifact@v3
        with:
          name: solution_configuration_artifacts
          path: ${{ inputs.solution-folder }}/

  build:
    needs: solution-configuration
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download solution configuration artifacts
        id: download-solution-configuration-artifacts
        uses: actions/download-artifact@v3
        with:
          name: solution_configuration_artifacts
          path: tmp/solution/

      - name: Setup Node.js ${{ inputs.node-verion }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-verion }}

      - name: Install dependencies
        id: install-dependecies
        run: npm ci

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: MSBuild
        id: msbuild
        working-directory: tmp/solution/
        run: msbuild /t:rebuild /restore /p:configuration=release

      - name: Rename solution files to `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip` &  `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip`
        id: rename-solution-files
        run: get-childitem -path tmp/solution/bin/Release | rename-item -newname { $_.name -replace '${{ inputs.solution-folder }}', '${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}' }

      - name: Upload solution artifacts
        id: upload-solution-artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_artifacts
          path: tmp/solution/bin/Release/

  upload-to-azure-storage:
    needs:
      - solution-configuration
      - build
    if: ${{ false }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        
      - name: Download solution artifacts
        id: download-solution-artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_artifacts
          path: tmp/solution/

      # - name: Check if directory already exists
      #   id: check-if-directory-already-exists
      #   run: |
      #     result=$( az storage blob exists \
      #     --name "${{ needs.solution-configuration.outputs.solution-unique-name }}/README.md" \
      #     --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
      #     --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
      #     --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
      #     --output "tsv" )

      #     echo "result=$result" >> $GITHUB_OUTPUT

      - name: Check if directory already exists
        id: check-if-directory-already-exists
        run: |
          result=$( az storage blob exists \
          --name "${{ needs.solution-configuration.outputs.solution-unique-name }}" \
          --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          --output "tsv" )

          echo "result=$result" >> $GITHUB_OUTPUT

      - name: "Warning - no directory found to delete"
        if: ${{ steps.check-if-directory-already-exists.outputs.result == 'False' }}
        run: |
          echo "::warning title=Delete solution old version from Azure storage::No directory found to delete."

      - name: Delete solution old version directory from Azure storage (if exists)
        id: delete-solution-old-version-directory-from-azure-storage
        if: ${{ inputs.delete-old-version-from-azure == true && steps.check-if-directory-already-exists.outputs.result == 'True' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage fs directory delete \
            --yes \
            --name "${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --file-system "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

      # - name: Upload `README.md` of the solution new version to Azure storage.
      #   id: upload-solution-new-version-readme-file-to-azure-storage
      #   if: ${{ inputs.azure-solution-package-type != 'both' }}
      #   uses: Azure/cli@v1
      #   with:
      #     inlineScript: |
      #       az storage blob upload \
      #       --file "github-action/solution/README.md" \
      #       --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
      #       --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
      #       --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
      #       --content-type text/markdown \
      #       --overwrite true

      - name: Upload solution new version files (unmanaged & managed) to Azure storage
        id: upload-solution-new-version-files-to-azure-storage
        if: ${{ inputs.azure-solution-package-type == 'both' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload-batch \
            --source tmp/solution/ \
            --destination "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --content-type application/zip \
            --overwrite true

      - name: Upload solution new version file (unmanaged) to Azure storage
        id: upload-solution-new-version-unmanaged-file-to-azure-storage
        if: ${{ inputs.azure-solution-package-type == 'unmanaged' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload \
            --file "tmp/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip" \
            --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --content-type application/zip \
            --overwrite true

      - name: Upload solution new version file (managed) to Azure storage
        id: upload-solution-new-version-managed-file-to-azure-storage
        if: ${{ inputs.azure-solution-package-type == 'managed' }}
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az storage blob upload \
            --file "tmp/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip" \
            --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}/${{ needs.solution-configuration.outputs.solution-unique-name }}" \
            --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --content-type application/zip \
            --overwrite true

  update-database:
    needs:
      - solution-configuration
      - upload-to-azure-storage
    if: ${{ always() }}
    runs-on: ubuntu-latest

    env:
      db-name: marketplacedb
      db-server-name: bevermarketplaceserver.database.windows.net
      db-username: ${{ secrets.DB_USERNAME }}
      db-password: ${{ secrets.DB_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      # - name: Check if the control already exists in DB
      # - name: Update if exists
      # - name: Create a new raw if doesn't exist

      - name: Display Value (tmp/check.sql 1)
        run: |
          echo "SELECT pcf_control_id FROM pcf_control WHERE name = '${{ inputs.control-title }}'"

      - name: Display Value (tmp/check.sql 2)
        run: |
          echo "
            SELECT CASE WHEN EXISTS(
              SELECT pcf_control_id FROM pcf_control
              WHERE name = '${{ inputs.control-title }}')
                THEN 'true'
                ELSE 'false'
              END AS exists"

      - name: Get GitHub dynamic URLs from Marketplace/Assets
        id: get-github-dynamic-urls
        run: |
          tumbnailUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-thumbnail-url }}"; else echo "${{ inputs.control-thumbnail-url }}"; fi)"
          primaryImageUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-primary-image-url }}"; else echo "${{ inputs.control-primary-image-url }}"; fi)"
          markdownFileUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-markdown-file-url }}"; else echo "${{ inputs.control-markdown-file-url }}"; fi)"
          "thumbnail-url='$tumbnailUrl'" >> $env:GITHUB_OUTPUT
          "primary-image-url='$primaryImageUrl'" >> $env:GITHUB_OUTPUT
          "markdown-file-url='$markdownFileUrl'" >> $env:GITHUB_OUTPUT

      - name: Display Value (tmp/update.sql)
        run: |
          echo "
            UPDATE pcf_control
            SET
              name = '${{ inputs.control-title }}'
              description = '${{ inputs.control-description }}'
              youtube_url = '${{ inputs.control-youtube-video-url }}'
              thumbnail_url = '${{ steps.get-github-dynamic-urls.outputs.thumbnail-url }}'
              primary-image-url = '${{ steps.get-github-dynamic-urls.outputs.primary-image-url }}'
              markdown_file_url = '${{ steps.get-github-dynamic-urls.outputs.markdown-file-url }}'
              github_repo_url = '${{ needs.solution-configuration.outputs.repo-url }}'
              blob_url = '${{ needs.solution-configuration.outputs.solution-unique-name }}/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip'
              version = 'v${{ needs.solution-configuration.outputs.solution-version }}'
              tags = '${{ needs.solution-configuration.outputs.control-tags }}'
            WHERE pcf_control_id IN(SELECT TOP 1 pcf_control_id FROM pcf_control WHERE name = '${{ inputs.control-title }}')"

      - name: Display Value (tmp/create.sql)
        run: |
          echo "
            INSERT INTO pcf_control (name, description, youtube_url, thumbnail_url, primary_image_url, markdown_file_url, github_repo_url, blob_url, version, tags)
            VALUES (
              '${{ inputs.control-title }}',
              '${{ inputs.control-description }}',
              '${{ inputs.control-youtube-video-url }}',
              '${{ steps.get-github-dynamic-urls.outputs.thumbnail-url }}',
              '${{ steps.get-github-dynamic-urls.outputs.primary-image-url }}',
              '${{ steps.get-github-dynamic-urls.outputs.markdown-file-url }}',
              '${{ needs.solution-configuration.outputs.repo-url }}',
              '${{ needs.solution-configuration.outputs.solution-unique-name }}/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip',
              'v${{ needs.solution-configuration.outputs.solution-version }}',
              '${{ needs.solution-configuration.outputs.control-tags }}'
            )"

      # - name: Create a new raw of pcf_control table in Azure SQL DB
      #   uses: azure/sql-action@v2.1
      #   with:
      #     # required, connection string incl the database and user authentication information
      #     connection-string:
      #     # required, path to either a .sql, .dacpac, or .sqlproj file
      #     path:
      #     # optional when using a .sql script, required otherwise
      #     # sqlpackage action on the .dacpac or .sqlproj file, supported options are: Publish, Script, DeployReport, DriftReport
      #     action:
      #     # optional additional sqlpackage or go-sqlcmd arguments
      #     arguments:
      #     # optional additional dotnet build options when building a database project file
      #     build-arguments:

      # - name: Generate SQL script to insert record
      #   uses: microsoft/mssql-scripter@v1
      #   with:
      #     script-destination: tmp/db.sql
      #     server: ${{ env.db-server-name }}
      #     database: ${{ env.db-name }}
      #     username: ${{ env.db-username }}
      #     password: ${{ env.db-password }}
      #   run: |
      #     echo "INSERT INTO your-table-name (column1, column2, column3) VALUES ('value1', 'value2', 'value3');" >> ./insert.sql

      # - name: Execute SQL script to insert record
      #   uses: microsoft/mssql-cli@v1
      #   with:
      #     server: ${{ env.db-server-name }}
      #     database: ${{ env.db-name }}
      #     username: ${{ env.db-username }}
      #     password: ${{ env.db-password }}
      #     file: ./insert.sql

      # - name: Generate SQL script to create a new row or to update the row if it already exists
        # id: generate-sql-script
        # uses: microsoft/mssql-scripter@v1
        # with:
        #   script-destination: tmp/db.sql
        #   server: ${{ env.db-server-name }}
        #   database: ${{ env.db-name }}
        #   username: ${{ env.db-username }}
        #   password: ${{ env.db-password }}
        # run: |
        #   tumbnailUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-thumbnail-url }}"; else echo "${{ inputs.control-thumbnail-url }}"; fi)"
        #   primaryImageUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-primary-image-url }}"; else echo "${{ inputs.control-primary-image-url }}"; fi)"
        #   markdownFileUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-markdown-file-url }}"; else echo "${{ inputs.control-markdown-file-url }}"; fi)"

        #   echo "
        #     IF EXISTS (SELECT pcf_control_id FROM pcf_control WHERE name = '${{ inputs.control-title }}')
        #     BEGIN
        #       UPDATE pcf_control
        #       SET
        #         name = '${{ inputs.control-title }}'
        #         description = '${{ inputs.control-description }}'
        #         thumbnail_url = '$tumbnailUrl'
        #         primary-image-url = '$primaryImageUrl'
        #         markdown_file_url = '$markdownFileUrl'
        #         youtube_url = '${{ inputs.control-youtube-video-url }}'
        #         github_repo_url = 'https://github.com/${{ env.GITHUB_REPOSITORY }}'
        #         blob_url = '${{ ${{ needs.solution-configuration.outputs.solution-unique-name }} }}/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip'
        #         version = 'v${{ needs.solution-configuration.outputs.solution-version }}'
        #         tags = '${{ inputs.control-tags }}'
        #       WHERE pcf_control_id IN(SELECT TOP 1 pcf_control_id FROM pcf_control WHERE name = '${{ inputs.control-title }}')
        #     END
        #     ELSE
        #       INSERT INTO pcf_control (name, description, thumbnail_url, primary_image_url, markdown_file_url, youtube_url, github_repo_url, blob_url, version, tags)
        #       VALUES (
        #         '${{ inputs.control-title }}',
        #         '${{ inputs.control-description }}',
        #         '$tumbnailUrl',
        #         '$primaryImageUrl',
        #         '$markdownFileUrl',
        #         '${{ inputs.control-youtube-video-url }}',
        #         'https://github.com/${{ env.GITHUB_REPOSITORY }}',
        #         '${{ ${{ needs.solution-configuration.outputs.solution-unique-name }} }}/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip',
        #         'v${{ needs.solution-configuration.outputs.solution-version }}',
        #         '${{ inputs.control-tags }}'
        #       )
        #     END" >> tmp/insert.sql

      # - name: Execute the SQL script
      #   id: execute-sql-script
      #   uses: microsoft/mssql-cli@v1
      #   with:
      #     server: ${{ env.db-server-name }}
      #     database: ${{ env.db-name }}
      #     username: ${{ env.db-username }}
      #     password: ${{ env.db-password }}
      #     file: tmp/db.sql

      # //////////////
      # - name: Generate SQL script to check if a row already exists in DB or not (tmp/check.sql)
        # id: generate-check-sql
        # uses: microsoft/mssql-scripter@v1
        # with:
        #   script-destination: tmp/check.sql
        #   server: ${{ env.db-server-name }}
        #   database: ${{ env.db-name }}
        #   username: ${{ env.db-username }}
        #   password: ${{ env.db-password }}
        # run: |
        #   echo "
        #     SELECT CASE WHEN EXISTS(
        #       SELECT pcf_control_id FROM pcf_control
        #       WHERE name = '${{ inputs.control-title }}')
        #         THEN 'true'
        #         ELSE 'false'
        #       END AS exists" >> tmp/check.sql

      # - name: Execute the SQL script tmp/check.sql
      #   id: execute-check-sql
      #   uses: microsoft/mssql-cli@v1
      #   with:
      #     server: ${{ env.db-server-name }}
      #     database: ${{ env.db-name }}
      #     username: ${{ env.db-username }}
      #     password: ${{ env.db-password }}
      #     file: tmp/check.sql

      # - name: Generate SQL script to update the row (tmp/update.sql)
      #   id: generate-update-sql
      #   if: ${{ steps.execute-check-sql.outputs.row-exists == 'true' }}
      #   run: |
      #     tumbnailUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-thumbnail-url }}"; else echo "${{ inputs.control-thumbnail-url }}"; fi)"
      #     primaryImageUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-primary-image-url }}"; else echo "${{ inputs.control-primary-image-url }}"; fi)"
      #     markdownFileUrl="$(if [[ "${{ inputs.use-default }}" == "true" ]]; then echo "${{ needs.solution-configuration.outputs.default-control-markdown-file-url }}"; else echo "${{ inputs.control-markdown-file-url }}"; fi)"
          
      #     echo "
      #       UPDATE pcf_control
      #       SET
      #         name = '${{ inputs.control-title }}'
      #         description = '${{ inputs.control-description }}'
      #         thumbnail_url = '$tumbnailUrl'
      #         primary-image-url = '$primaryImageUrl'
      #         markdown_file_url = '$markdownFileUrl'
      #         youtube_url = '${{ inputs.control-youtube-video-url }}'
      #         github_repo_url = 'https://github.com/${{ env.GITHUB_REPOSITORY }}'
      #         blob_url = '${{ ${{ needs.solution-configuration.outputs.solution-unique-name }} }}/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip'
      #         version = 'v${{ needs.solution-configuration.outputs.solution-version }}'
      #         tags = '${{ inputs.control-tags }}'
      #       WHERE pcf_control_id IN(SELECT TOP 1 pcf_control_id FROM pcf_control WHERE name = '${{ inputs.control-title }}')" >> tmp/update.sql

      # - name: Get row data from Azure SQL database
      #   id: get-row
      #   uses: Azure/sql-action@v1.1.0
      #   with:
      #     server-name: your-server-name
      #     database-name: your-database-name
      #     query: SELECT * FROM your-table-name WHERE id = 123
      #     outputs: |
      #       column1: ${{ steps.get-row.outputs.result[0].column1 }}
      #       column2: ${{ steps.get-row.outputs.result[0].column2 }}

  create-release: 
    needs:
      - solution-configuration
      - update-database
    if: ${{ inputs.create-new-release == true }}
    runs-on: ubuntu-latest
    
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-name: v${{ needs.solution-configuration.outputs.solution-version }}
      release-tag-name: v${{ needs.solution-configuration.outputs.solution-version }}
      release-url: ${{ steps.create-release.outputs.html_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Download solution artifacts
        id: download-solution-artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_artifacts
          path: tmp/solution/

      - name: Create release v${{ needs.solution-configuration.outputs.solution-version }}
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.solution-configuration.outputs.solution-version }}
          release_name: v${{ needs.solution-configuration.outputs.solution-version }}
          body: Please refer to [CHANGELOG.md](https://github.com/BeverCRM/PCF-${{ needs.solution-configuration.outputs.solution-unique-name }}/blob/master/CHANGELOG.md) for details.

      - name: Upload release asset `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip` (unmanaged)
        id: release-unmanaged-solution
        if: ${{ steps.create-release.conclusion == 'success' && (inputs.release-solution-package-type == 'unmanaged' || inputs.release-solution-package-type == 'both') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: tmp/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip
          asset_name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}.zip
          asset_content_type: application/zip

      - name: Upload release asset `${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip` (managed)
        id: release-managed-solution
        if: ${{ steps.create-release.conclusion == 'success' && (inputs.release-solution-package-type == 'managed' || inputs.release-solution-package-type == 'both') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: tmp/solution/${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip
          asset_name: ${{ needs.solution-configuration.outputs.solution-unique-name }}_${{ needs.solution-configuration.outputs.solution-parsed-version }}_managed.zip
          asset_content_type: application/zip
