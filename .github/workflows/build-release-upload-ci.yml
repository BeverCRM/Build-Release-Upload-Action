name: Build & Release & Upload CI (Reusable Workflow)

on:
  workflow_call:
    inputs:
      node-version:
        description: Node verion
        default: 16
        type: string
      msbuildtarget:
        description: Solution folder name
        default: Solution
        type: string
      delete-old-version:
        description: Delete the old version of the solution from Azure blob storage
        default: true
        type: boolean
      release-solution-package-type:
        description: Solution package type to upload to release assets (none / unmanaged / managed / both)
        default: none
        type: choice
        options: 
        - 'none'
        - 'unmanaged'
        - 'managed'
        - 'both'
      azure-solution-package-type:
        description: Solution package type to upload to Azure blob storage (unmanaged / managed / both)
        default: managed
        type: choice
        options: 
        - 'unmanaged'
        - 'managed'
        - 'both'

    outputs:
      solution-unique-name:
        description: Solution Unique Name
        value: ${{ jobs.main.outputs.get-solution-data }}
      solution-version:
        description: Solution Version
        value: ${{ jobs.main.outputs.get-solution-data }}
      solution-parsed-version:
        description: Solution Parsed Version
        value: ${{ jobs.main.outputs.get-solution-data }}
      release-id:
        description: Release Id
        value: ${{ jobs.main.outputs.random-number-generator }}
      release-name:
        description: Release Name
        value: ${{ jobs.main.outputs.random-number-generator }}
      release-tag-name:
        description: Release Tag Name
        value: ${{ jobs.main.outputs.random-number-generator }}
      release-url:
        description: Release Url
        value: ${{ jobs.main.outputs.random-number-generator }}
      unmanaged-zip-exists:
        description: Unmanaged Solution Exists
        value: ${{ jobs.main.outputs.unmanaged-zip-exists }}
      managed-zip-exists:
        description: Managed Solution Exists
        value: ${{ jobs.main.outputs.managed-zip-exists }}

jobs:
  build:
    runs-on: windows-latest

    outputs:
      solution-unique-name: ${{ steps.get-solution-data.outputs.unique-name }}
      solution-version: ${{ steps.get-solution-data.outputs.version }}
      solution-parsed-version: ${{ steps.get-solution-data.outputs.parsed-version }}
      unmanaged-zip-exists: ${{ steps.unmanaged-zip-exists.outputs.info }}
      managed-zip-exists: ${{ steps.managed-zip-exists.outputs.info }}

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js ${{ inputs.node-verion }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-verion }}

    - name: Get solution unique name and version
      id: get-solution-data
      run: |
        [xml]$XmlDocument=Get-Content -Path "${{ inputs.msbuildtarget }}\src\Other\Solution.xml"
        "unique-name=$( $XmlDocument.ImportExportXml.SolutionManifest.UniqueName )" >> $env:GITHUB_OUTPUT
        "version=$( $XmlDocument.ImportExportXml.SolutionManifest.Version )" >> $env:GITHUB_OUTPUT
        "parsed-version=$( $XmlDocument.ImportExportXml.SolutionManifest.Version.replace('.', '_') )" >> $env:GITHUB_OUTPUT

    # TODO: remove
    - name: Show step outputs (get-solution-data)
      run: |
        echo "unique-name: ${{ steps.get-solution-data.outputs.unique-name }}"
        echo "version: ${{ steps.get-solution-data.outputs.version }}"
        echo "parsed-version: ${{ steps.get-solution-data.outputs.parsed-version }}"

    - name: Install dependencies
      id: install-dependecies
      run: npm ci

    - name: Refresh types
      id: refresh-types
      run: npm run refreshTypes

    - name: Build project
      id: build-project
      run: |
        npm run clean --if-present
        npm run build -- --buildMode production --if-present

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: MSBuild
      id: msbuild
      working-directory: ${{ inputs.msbuildtarget }}
      run: msbuild /t:rebuild /restore /p:configuration=release

    - name: Check if solution exists `${{ inputs.msbuildtarget }}/bin/Release/${{ inputs.msbuildtarget }}.zip` (unmanaged)
      id: unmanaged-zip-exists
      run: |
        "info=$( "$(Test-Path ${{ inputs.msbuildtarget }}/bin/Release/${{ inputs.msbuildtarget }}.zip)".ToLower() )" >> $env:GITHUB_OUTPUT

    - name: Check if solution exists `${{ inputs.msbuildtarget }}/bin/Release/${{ inputs.msbuildtarget }}_managed.zip` (managed)
      id: managed-zip-exists
      run: |
        "info=$( "$(Test-Path ${{ inputs.msbuildtarget }}/bin/Release/${{ inputs.msbuildtarget }}_managed.zip)".ToLower() )" >> $env:GITHUB_OUTPUT

    - name: "Notice - unmanaged solution"
      if: ${{ steps.unmanaged-zip-exists.outputs.info == 'false' }}
      run: Write-Output "::notice title=Unmanaged solution::Unmanaged solution doesn't exist."

    - name: "Notice - managed solution"
      if: ${{ steps.managed-zip-exists.outputs.info == 'false' }}
      run: Write-Output "::notice title=Managed solution::Managed solution doesn't exist."

    - name: Rename solution files to `${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}.zip` & `${{ steps.get-solution-data.outputs.parsed-version }}_managed.zip`
      id: rename-solution-files
      run: get-childitem -path ${{ inputs.msbuildtarget }}/bin/Release | rename-item -newname { $_.name -replace '${{ inputs.msbuildtarget }}', '${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}' }

    - name: Upload solution artifacts
      id: upload-solution-artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_artifacts
        path: ${{ inputs.msbuildtarget }}/bin/Release/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-name: v${{ needs.build.outputs.solution-version }}
      release-tag-name: v${{ needs.build.outputs.solution-version }}
      release-url: ${{ steps.create-release.outputs.html_url }}

    steps:
    - uses: actions/checkout@v3

    - name: Create release v${{ needs.build.outputs.solution-version }}
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.solution-version }}
        release_name: v${{ needs.build.outputs.solution-version }}
        body_path: CHANGELOG.md

    - name: Download solution artifacts
      id: download-solution-artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_artifacts
        path: github-action/artifacts/

    - name: Upload release asset `${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}.zip` (unmanaged)
      id: release-unmanaged-solution
      if: (steps.create-release.conclusion == 'success') &&
          (needs.build.outputs.unmanaged-zip-exists == 'true') &&
          ((inputs.release-solution-package-type == 'unmanaged') || (inputs.release-solution-package-type == 'both'))
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: github-action/artifacts/${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-arsed-version }}.zip
        asset_name: ${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}.zip
        asset_content_type: application/zip

    - name: Upload release asset `${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_managed.zip` (managed)
      id: release-managed-solution
      if: (steps.create-release.conclusion == 'success') &&
          (needs.build.outputs.managed-zip-exists == 'true') &&
          ((inputs.release-solution-package-type == 'managed') || (inputs.release-solution-package-type == 'both'))
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: github-action/artifacts/${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_managed.zip
        asset_name: ${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_managed.zip
        asset_content_type: application/zip

  upload-to-azure-storage:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      
    - name: Download solution artifacts
      id: download-solution-artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_artifacts
        path: github-action/artifacts/

    # - name: Get solution old version from Azure storage
    #   id: get-solution-old-version-from-azure-storage
    #   run: |
    #     BlobListJson=$( az storage blob list \
    #     --prefix "${{ needs.build.outputs.solution-unique-name }}" \
    #     --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
    #     --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
    #     --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" )
    #     echo "blob-list-json=$( echo $BlobListJson )" >> $GITHUB_OUTPUT

    # TODO: remove
    # - name: Show step outputs (get-solution-old-version-from-azure-storage)
      # run: echo "${{ steps.get-solution-old-version-from-azure-storage.outputs.blob-list-json }}"

    # - name: "Notice - solution old version"
    #   if: ${{ steps.get-solution-old-version-from-azure-storage.outputs.blob-list-json == '[]' }}
    #   run: echo "::notice title=Get solution old version::No blob found with name starting with \`${{ needs.build.outputs.solution-unique-name }}\`."

    # - name: Parse JSON, get solution name from Azure response (if exists)
    #   id: get-solution-old-version-name
    #   continue-on-error: true
    #   run: |
    #   echo "info=${{ fromJSON(steps.get-solution-old-version-from-azure-storage.outputs.blob-list-json)[0].name }}" >> $GITHUB_OUTPUT

    # TODO: remove
    # - name: Show step outputs (get-solution-old-version-names)
      # run: echo "${{ steps.get-solution-old-version-names.outputs.info }}"

    - name: Delete solution old version files (unmanaged & managed) from Azure storage (if exists)
      id: delete-solution-old-version-both-files-from-azure-storage
      if: (inputs.delete-old-version == 'true') && (inputs.azure-solution-package-type == 'both')
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az storage blob delete-batch \
          --pattern "${{ steps.get-solution-old-version-name.outputs.info }}" \
          --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}_*.zip" \
          --source "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

    - name: Delete solution old version file (unmanaged) from Azure storage (if exists)
      id: delete-solution-old-version-unmanaged-file-from-azure-storage
      if: (inputs.delete-old-version == 'true') && (inputs.azure-solution-package-type == 'unmanaged')
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az storage blob delete-batch \
          --pattern "${{ steps.get-solution-old-version-name.outputs.info }}_*_[!managed].zip" \
          --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}_*.zip" \
          --source "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

    - name: Delete solution old version file (managed) from Azure storage (if exists)
      id: delete-solution-old-version-managed-file-from-azure-storage
      if: (inputs.delete-old-version == 'true') && (inputs.azure-solution-package-type == 'managed')
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az storage blob delete-batch \
          --pattern "${{ steps.get-solution-old-version-name.outputs.info }}_*_managed.zip" \
          --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}_*.zip" \
          --source "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

    - name: Upload solution new version files (unmanaged & managed) to Azure storage (if exists)
      if: inputs.azure-solution-package-type == 'both'
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az storage blob upload-batch \
          --source github-action/artifacts/ \
          --destination "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          --content-type application/zip \
          --overwrite true

    - name: Upload solution new version file (unmanaged) to Azure storage (if exists)
      if: (needs.build.outputs.unmanaged-zip-exists == 'true') && (inputs.azure-solution-package-type == 'unmanaged')
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az storage blob upload-batch \
          --file "github-action/artifacts/${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}.zip" \
          --name "${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}.zip" \
          --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          --content-type application/zip \
          --overwrite true

    - name: Upload solution new version file (managed) to Azure storage (if exists)
      if: (needs.build.outputs.managed-zip-exists == 'true') && (inputs.azure-solution-package-type == 'managed')
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az storage blob upload-batch \
          --file "github-action/artifacts/${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_managed.zip" \
          --name "${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_managed.zip" \
          --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
          --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          --content-type application/zip \
          --overwrite true
          
    # - name: Delete solution old version from Azure storage (if exists)
    #   id: delete-solution-old-version-from-azure-storage
    #   if: (steps.get-solution-old-version-names.outputs.info != '') && (inputs.delete-old-version == 'true')
    #   uses: Azure/cli@v1
    #   with:
    #     inlineScript: |
    #       az storage blob delete \
    #       --name "${{ steps.get-solution-old-version-name.outputs.info }}" \
    #       --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
    #       --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
    #       --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

    # - name: Upload managed solution to Azure storage (if exists)
    #   if: steps.managed-zip-exists.outputs.info == 'true'
    #   uses: Azure/cli@v1
    #   with:
    #     inlineScript: |
    #       az storage blob upload \
    #       --file "github-action/artifacts/${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_managed.zip" \
    #       --name "${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}.zip" \
    #       --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
    #       --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
    #       --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
    #       --content-type application/zip \
    #       --overwrite true




  # main:
  #   name: Build & Release & Upload
  #   runs-on: ubuntu-latest
    
  #   outputs:
  #     solution-unique-name: ${{ needs.build.outputs.solution-unique-name }}
  #     solution-version: ${{ needs.build.outputs.solution-version }}
  #     solution-parsed-version: ${{ needs.build.outputs.solution-parsed-version }}
  #     release-id: ${{ steps.random-number-generator.outputs.random-number }}
  #     release-name: ${{ steps.random-number-generator.outputs.random-number }}
  #     release-tag-name: ${{ steps.random-number-generator.outputs.random-number }}
  #     release-url: ${{ steps.random-number-generator.outputs.random-number }}
  #     unmanaged-zip-exists: ${{ steps.unmanaged-zip-exists.outputs.info }}
  #     managed-zip-exists: ${{ steps.managed-zip-exists.outputs.info }}

    # steps:
    # - uses: actions/checkout@v3

    # - name: Start ...
    #   run: echo Start

    # - name: Show env
    #   run: |
    #     echo "GITHUB_OUTPUT: ${{ env.GITHUB_OUTPUT }}"

    # - name: Show inputs
    #   run: |
    #     echo "node-version: ${{ inputs.node-version }}"
    #     echo "msbuildtarget: ${{ inputs.msbuildtarget }}"
    #     echo "delete-old-version: ${{ inputs.delete-old-version }}"
    #     echo "release-solution-package-type: ${{ inputs.release-solution-package-type }}"
    #     echo "azure-solution-package-type: ${{ inputs.azure-solution-package-type }}"

    # - name: Show secrets
    #   run: |
    #     echo "GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}"
    #     echo "AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}"
    #     echo "AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}"
    #     echo "AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

    # - name: Finish ...
    #   run: echo Finish

