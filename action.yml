name: "Build & Release & Upload CI"
description: "This will build the project, create a new release, and upload the solution to Azure blob storage"

  # TODO: encrypt secrets (IMORTANT)

  # env GITHUB_TOKEN
  # github-token:
  #   description: "GITHUB_TOKEN"
  #   required: true

  # TODO: no need
  # env GITHUB_OUTPUT
  # github-output:
  #   description: "GITHUB_OUTPUT"
  #   required: true

inputs:
  node-version:
    description: "Node verion"
    default: 16
  msbuildtarget:
    description: "Solution folder name"
    default: "Solution"
  delete-old-version:
    description: "Delete the old version of the solution from Azure blob storage"
    default: true
  release-solution-package-type:
    description: "Solution package type to upload to release assets (unmanaged / managed / both)"
    default: "managed"
  azure-solution-package-type:
    description: "Solution package type to upload to Azure blob storage (unmanaged / managed / both)"
    default: "managed"

outputs:
  test:
    description: "This is a sample output."
    value: "BLA BLa Bla bla"
  # solution-unique-name:
  #   description: "Solution Unique Name"
  #   value: ${{ steps.get-solution-data.outputs.unique-name }}
  # solution-version:
  #   description: "Solution Version"
  #   value: ${{ steps.get-solution-data.outputs.version }}
  # solution-parsed-version:
  #   description: "Solution Parsed Version"
  #   value: ${{ steps.get-solution-data.outputs.parsed-version }}
  # release-id:
  #   description: "Release Id"
  #   value: ${{ steps.random-number-generator.outputs.random-number }}
  # release-name:
  #   description: "Release Name"
  #   value: ${{ steps.random-number-generator.outputs.random-number }}
  # release-tag-name:
  #   description: "Release Tag Name"
  #   value: ${{ steps.random-number-generator.outputs.random-number }}
  # release-url:
  #   description: "Release Url"
  #   value: ${{ steps.random-number-generator.outputs.random-number }}
  # unmanaged-zip-exists:
  #   description: "Unmanaged Solution Exists"
  #   value: ${{ steps.unmanaged-zip-exists.outputs.info }}
  # managed-zip-exists:
  #   description: "Managed Solution Exists"
  #   value: ${{ steps.managed-zip-exists.outputs.info }}

runs:
  using: composite
  
  steps:
  - name: Show env
    shell: bash
    run: |
      echo "${{ env.GITHUB_TOKEN }}"
      echo "${{ env.GITHUB_OUTPUT }}"

  - name: Show inputs
    shell: bash
    run: |
      echo "${{ inputs.node-version }}"
      echo "${{ inputs.msbuildtarget }}"
      echo "${{ inputs.delete-old-version }}"
      echo "${{ inputs.release-solution-package-type }}"
      echo "${{ inputs.azure-solution-package-type }}"

  # build:
  # steps:
  # - name: Setup Node.js ${{ inputs.node-verion }}
  #   uses: actions/setup-node@v3
  #   with:
  #     node-version: ${{ inputs.node-verion }}

  # - name: Get solution unique name and version
  #   id: get-solution-data
  #   shell: pwsh
  #   run: |
  #     [xml]$XmlDocument=Get-Content -Path "${{ env.msbuildtarget }}\src\Other\Solution.xml"
  #     "unique-name=$( $XmlDocument.ImportExportXml.SolutionManifest.UniqueName )" >> $env:GITHUB_OUTPUT
  #     "version=$( $XmlDocument.ImportExportXml.SolutionManifest.Version )" >> $env:GITHUB_OUTPUT
  #     "parsed-version=$( $XmlDocument.ImportExportXml.SolutionManifest.Version.replace('.', '_') )" >> $env:GITHUB_OUTPUT

  # - name: Show step outputs (get-solution-data)
  #   shell: bash
  #   run: |
  #     echo "${{ steps.get-solution-data.outputs.unique-name }}"
  #     echo "${{ steps.get-solution-data.outputs.version }}"
  #     echo "${{ steps.get-solution-data.outputs.parsed-version }}"

  # - name: Install dependencies
  #   id: install-dependecies
  #   shell: pwsh
  #   run: npm ci

  # - name: Refresh types
  #   id: refresh-types
  #   shell: pwsh
  #   run: npm run refreshTypes

  # - name: Build project
  #   id: build-project
  #   shell: pwsh
  #   run: |
  #     npm run clean --if-present
  #     npm run build -- --buildMode production --if-present

  # - name: Setup MSBuild
  #   uses: microsoft/setup-msbuild@v1

  # - name: MSBuild
  #   id: msbuild
  #   shell: pwsh
  #   working-directory: ${{ env.msbuildtarget }}
  #   run: msbuild /t:rebuild /restore /p:configuration=release

  # - name: Check if solution exists `${{ env.msbuildtarget }}/bin/Release/${{ env.msbuildtarget }}.zip` (unmanaged)
  #   id: unmanaged-zip-exists
  #   shell: pwsh
  #   run: |
  #     "info=$( "$(Test-Path ${{ env.msbuildtarget }}/bin/Release/${{ env.msbuildtarget }}.zip)".ToLower() )" >> $env:GITHUB_OUTPUT

  # - name: Show step outputs (unmanaged-zip-exists)
  #   shell: bash
  #   run: echo "${{ steps.unmanaged-zip-exists.outputs.info }}"

  # - name: Check if solution exists `${{ env.msbuildtarget }}/bin/Release/${{ env.msbuildtarget }}_managed.zip` (managed)
  #   id: managed-zip-exists
  #   shell: pwsh
  #   run: |
  #     "info=$( "$(Test-Path ${{ env.msbuildtarget }}/bin/Release/${{ env.msbuildtarget }}_managed.zip)".ToLower() )" >> $env:GITHUB_OUTPUT

  # - name: Show step outputs (managed-zip-exists)
  #   shell: bash
  #   run: echo "${{ steps.managed-zip-exists.outputs.info }}"

  # - name: "Notice - unmanaged solution"
  #   if: ${{ steps.unmanaged-zip-exists.outputs.info == 'false' }}
  #   shell: pwsh
  #   run: Write-Output "::notice title=Unmanaged solution::Unmanaged solution doesn't exist."

  # - name: "Notice - managed solution"
  #   if: ${{ steps.managed-zip-exists.outputs.info == 'false' }}
  #   shell: pwsh
  #   run: Write-Output "::notice title=Managed solution::Managed solution doesn't exist."

  # - name: Rename solution files to `${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}.zip` & `${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_managed.zip`
  #   id: rename-solution-files
  #   shell: pwsh
  #   run: get-childitem -path ${{ env.msbuildtarget }}/bin/Release | rename-item -newname { $_.name -replace '${{ env.msbuildtarget }}', '${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}' }

  # TODO: remove ?
  # - name: Upload solution artifacts
  #   id: upload-solution-artifacts
  #   uses: actions/upload-artifact@v3
  #   with:
  #     name: ${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_artifacts
  #     path: ${{ env.msbuildtarget }}/bin/Release/

  # # create-release:
  # - name: Create release v${{ steps.get-solution-data.outputs.version }}
  #   id: create-release
  #   uses: actions/create-release@v1
  #   env:
  #     GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
  #   with:
  #     tag_name: v${{ steps.get-solution-data.outputs.version }}
  #     release_name: v${{ steps.get-solution-data.outputs.version }}
  #     body_path: CHANGELOG.md

  # # TODO: remove ?
  # # - name: Download solution artifacts
  # #   id: download-solution-artifacts
  # #   uses: actions/download-artifact@v3
  # #   with:
  # #     name: ${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_artifacts
  # #     path: github-action/artifacts/

  # - name: Upload release asset `${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_unmanaged.zip` (unmanaged)
  #   id: release-unmanaged-solution
  #   if: (steps.create-release.conclusion == 'success') &&
  #       (steps.unmanaged-zip-exists.outputs.info == 'true') &&
  #       ((inputs.release-solution-package-type == 'unmanaged') || (inputs.release-solution-package-type == 'both'))
  #   uses: actions/upload-release-asset@v1
  #   env:
  #     GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
  #   with:
  #     upload_url: ${{ steps.create-release.outputs.upload_url }}
  #     asset_path: github-action/artifacts/${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}.zip
  #     asset_name: ${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_unmanaged.zip
  #     asset_content_type: application/zip

  # - name: Upload release asset `${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_managed.zip` (managed)
  #   id: release-managed-solution
  #   if: (steps.create-release.conclusion == 'success') &&
  #       (steps.managed-zip-exists.outputs.info == 'true') &&
  #       ((inputs.release-solution-package-type == 'managed') || (inputs.release-solution-package-type == 'both'))
  #   uses: actions/upload-release-asset@v1
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   with:
  #     upload_url: ${{ steps.create-release.outputs.upload_url }}
  #     asset_path: github-action/artifacts/${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_managed.zip
  #     asset_name: ${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_managed.zip
  #     asset_content_type: application/zip

  # # upload-to-azure-storage:
  # # TODO: remove ?
  # # - name: Download solution artifacts
  # #   id: download-solution-artifacts
  # #   uses: actions/download-artifact@v3
  # #   with:
  # #     name: ${{ needs.build.outputs.solution-unique-name }}_${{ needs.build.outputs.solution-parsed-version }}_artifacts
  # #     path: github-action/artifacts/

  # - name: Get solution old version from Azure storage
  #   id: get-solution-old-version-from-azure-storage
  #   shell: bash
  #   run: |
  #     BlobListJson=$( az storage blob list \
  #     --prefix "${{ steps.get-solution-data.outputs.unique-name }}" \
  #     --account-name "${{ env.AZURE_STORAGE_ACCOUNT_NAME }}" \
  #     --container-name "${{ env.AZURE_STORAGE_CONTAINER_NAME }}" \
  #     --connection-string "${{ env.AZURE_STORAGE_CONNECTION_STRING }}" )
  #     echo "blob-list-json=$( echo $BlobListJson )" >> $GITHUB_OUTPUT

  # - name: Show step outputs (get-solution-old-version-from-azure-storage)
  #   shell: bash
  #   run: echo "${{ steps.get-solution-old-version-from-azure-storage.outputs.blob-list-json }}"

  # - name: "Notice - solution old version"
  #   if: ${{ steps.get-solution-old-version-from-azure-storage.outputs.blob-list-json == '[]' }}
  #   shell: bash
  #   run: echo "::notice title=Get solution old version::No blob found with name starting with \`${{ steps.get-solution-data.outputs.unique-name }}\`."

  # # - name: Parse JSON, get solution name from Azure response (if exists)
  # - name: Parse JSON, get solution names from Azure response (if exists)
  #   id: get-solution-old-version-names
  #   shell: bash
  #   run: |
  #     echo "info=${{ fromJSON(steps.get-solution-old-version-from-azure-storage.outputs.blob-list-json).name }}" >> $GITHUB_OUTPUT
  #   # echo "info=${{ fromJSON(steps.get-solution-old-version-from-azure-storage.outputs.blob-list-json)[0].name }}" >> $GITHUB_OUTPUT
  #   # continue-on-error: true

  # - name: Show step outputs (get-solution-old-version-names)
  #   shell: bash
  #   run: echo "${{ steps.get-solution-old-version-names.outputs.info }}"

  # - name: Delete solution old version from Azure storage (if exists)
  #   id: delete-solution-old-version-from-azure-storage
  #   if: (steps.get-solution-old-version-names.outputs.info != '') && (inputs.delete-old-version == 'true')
  #   uses: Azure/cli@v1
  #   with:
  #     inlineScript: |
  #       az storage blob delete \
  #       --name "${{ steps.get-solution-old-version-name.outputs.info }}" \
  #       --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
  #       --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
  #       --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

  # - name: Upload managed solution to Azure storage (if exists)
  #   if: steps.managed-zip-exists.outputs.info == 'true'
  #   uses: Azure/cli@v1
  #   with:
  #     inlineScript: |
  #       az storage blob upload \
  #       --file "github-action/artifacts/${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}_managed.zip" \
  #       --name "${{ steps.get-solution-data.outputs.unique-name }}_${{ steps.get-solution-data.outputs.parsed-version }}.zip" \
  #       --account-name "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
  #       --container-name "${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" \
  #       --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
  #       --content-type application/zip \
  #       --overwrite true
      